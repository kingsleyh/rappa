#!/usr/bin/env ruby
require 'configliere'
require File.dirname(File.expand_path(__FILE__)) + '/../src/rappa'

Settings.use :commandline

Settings.define :input_directory, :flag => 'i', :description => 'Input directory for package e.g. rappa package -i /path/to/project'
Settings.define :output_directory, :flag => 'o', :description => 'Output directory for package e.g. rappa package -o /path/to/output/location'
Settings.define :input_archive, :flag => 'a', :description => 'Input .rap archive for expand e.g. rappa expand -a /path/to/.rap'
Settings.define :output_archive, :flag => 'd', :description => 'Output directory for expand e.g. rappa expand -d /path/to/output/location'
Settings.define :input_rap, :flag => 'r', :description => 'Input .rap for deploy e.g. rappa deploy -r /path/to/.rap -u http://host/api/deploy -k api_key'
Settings.define :url, :flag => 'u', :description => 'Url for deploy e.g. rappa deploy -r /path/to/.rap -u http://host/api/deploy -k api_key'
Settings.define :api_key, :flag => 'k', :description => 'Api key for deploy e.g. rappa deploy -r /path/to/.rap -u http://host/api/deploy -k api_key'
Settings.define :excludes, :type => Array, :flag => 'e', :description => 'Files and folders to exclude from the rap e.g. rappa package -i /path/to/project -e file1,folder1'

Settings.resolve!

if Settings.rest.include?('package')
  if Settings[:input_directory].nil?
    puts '[ERROR] You must supply an input directory for package with -i e.g. rappa package -i /path/to/project'
    exit 1
  elsif Settings[:output_directory].nil?
    puts '[ERROR] You must supply an output directory for package with -o e.g. rappa package -o /path/to/output/location'
    exit 1
  else
    begin
      Rappa.new(Settings).package
      puts '[SUCCESS] packaged rap successfully'
      rap = Settings[:input_directory] + '/rap.yml'
      puts File.read(rap)
    rescue RappaError => e
      puts "[ERROR] Could not continue package because: #{e}"
      exit 1
    end
  end
elsif Settings.rest.include?('expand')
  if Settings[:input_archive].nil?
    puts '[ERROR] You must supply an input .rap archive for expand with -a e.g. rappa expand -a /path/to/.rap'
    exit 1
  elsif Settings[:output_archive].nil?
    puts '[ERROR] You must supply an output archive directory for expand with -d e.g. rappa expand -d /path/to/output/location'
    exit 1
  else
    begin
      Rappa.new(Settings).expand
      puts '[SUCCESS] expanded rap successfully'
    rescue RappaError => e
      puts "[ERROR] Could not continue expand because: #{e}"
      exit 1
    end
  end
elsif Settings.rest.include?('generate')
  Rappa.new.generate
  puts '[SUCCESS] generated sample.rap.yml into current directory'
elsif Settings.rest.include?('deploy')
  if Settings[:input_rap].nil?
    puts '[ERROR] You must supply an input .rap archive for deploy with -r e.g. rappa deploy -r /path/to/.rap -u http://host/api/deploy -k api_key'
    exit 1
  elsif Settings[:api_key].nil?
    puts '[ERROR] You must supply an api key for deploy with -k e.g. rappa deploy -r /path/to/.rap -u http://host/api/deploy -k api_key'
    exit 1
  elsif Settings[:url].nil?
    puts '[ERROR] You must supply a url for deploy with -u e.g. rappa deploy -r /path/to/.rap -u http://host/api/deploy -k api_key'
    exit 1
  else
    begin
      Rappa.new(Settings).deploy
      puts "[SUCCESS] deployed rap: #{Settings[:input_rap]} successfully to: #{Settings[:url]}"
    rescue RappaError => e
      puts "[ERROR] Could not continue deploy because: #{e}"
      exit 1
    end
  end
else
  info=<<-EOF

---------------------------------------------------------------------------------
Rappa Version: 0.0.7
Released: 17 November 2013
---------------------------------------------------------------------------------

Usage:

   Package:
     packages a directory containing a rap.yml into a .rap archive

       rappa package -i /path/to/project -o /path/to/output/location -e 'file1,folder1'

     -i is the input directory location (mandatory)
     -o is the output directory location (mandatory)
     -e is the list of files/folder to exclude from the rap (optional)

  Expand:
    expands a packaged .rap archive

      rappa expand -a /path/to/.rap -d /path/to/output/location

    -a is the input rap archive location (mandatory)
    -d is the destination location (mandatory)

  Deploy:
    deploys a .rap archive to a thundercat instance (see https://github.com/masterthought/thundercat)

      rappa deploy -r /path/to/.rap -u http://host/api/deploy -k api_key

    -r is the input .rap archive to deploy (mandatory)
    -u is the thundercat instance url (mandatory)
    -k is the api_key (mandatory)

  Generate:
    generates a sample rap.yml in the current directory

      rappa generate

Info:

  For more information on how to use rappa please visit:
    https://github.com/masterthought/rappa

---------------------------------------------------------------------------------

  EOF
  puts info
end

